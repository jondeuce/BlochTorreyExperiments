function test_matfun
%TEST_MATFUN Suite of tests for the class 'matfun'

%==========================================================================
% Initialize
%==========================================================================
[M,N]	=   deal( 100, 100 );
[m,n]	=   deal( 1000, 10 );
A       =   randnc(M,N);
B       =   randnc(M,N);
x       =   randnc(N,1);
xx      =   randnc(n,1);
y       =   randnc(1,M);
yy      =   randnc(1,m);

F       =   matfun( @(x) A*x, [M,N],    ...
    ...%-------------------------------------------------------------------
    ...% unary operations
    ...%-------------------------------------------------------------------
    'abs',          @(~,x) abs(A)*x,	...
    'ctranspose',	@(~,x) (A')*x,      ...
    'inv',          @(~,x) inv(A)*x,	...
    'reshape',      @(~,x,siz) reshape(A,siz)*x,	...
    'transpose',	@(~,x) (A.')*x,     ...
    ...%-------------------------------------------------------------------
    ...% general operations
    ...%-------------------------------------------------------------------
    'class',        @(~) class(A),      ...
    'diag',         @(~) diag(A),       ...
    'eps',          @(~) eps(max(abs(A(:)))),	...
    'isbanded',     @(~,lb,ub) isbanded(A,lb,ub),	...
    'isdiag',       @(~) isdiag(A),     ...
    'isfinite',     @(~) isfinite(A),	...
    'ishermitian',	@(~) ishermitian(A),	...
    'isinf',        @(~) isinf(A),      ...
    'isnan',        @(~) isnan(A),      ...
    'issparse',     @(~) issparse(A),	...
    'issymmetric',	@(~) issymmetric(A),	...
    'istril',       @(~) istril(A),     ...
    'istriu',       @(~) istriu(A),     ...
    'mldivide',     @(~,x) A\x,         ...
    'mrdivide',     @(y,~) y/A,         ...
    'norm',         @(~,p) norm(A,p),	...
    'trace',        @(~) trace(A)       ...
    );

%--------------------------------------------------------------------------
% Test
%--------------------------------------------------------------------------
padlen	=	18;
pad     =   @(s) [s,repmat(' ',1,padlen-length(s))];
gentest	=   @(testname,testres) ...
    fprintf('%s%0.16f\n',pad([testname,':']),norm(testres,inf));

%==========================================================================
% overloaded functions (binary operations)
%==========================================================================

%--------------------------------------------------------------------------
% minus
%--------------------------------------------------------------------------
gentest( 'minus right', (A-B)*x - (F-B)*x );
gentest( 'minus left ', (B-A)*x - (B-F)*x );

%--------------------------------------------------------------------------
% mpower
%--------------------------------------------------------------------------
mpow	=   3+randi(3);
gentest( 'mpower', (A^mpow)*x - (F^mpow)*x );

%--------------------------------------------------------------------------
% plus
%--------------------------------------------------------------------------
gentest( 'plus right', (A+B)*x - (F+B)*x );
gentest( 'plus left ', (B+A)*x - (B+F)*x );

%--------------------------------------------------------------------------
% shift
%--------------------------------------------------------------------------
mu	=   randnc(1,1);
gentest( 'shift', (A-mu.*eye(M,N))*x - shift(F,mu)*x );

%--------------------------------------------------------------------------
% times
%--------------------------------------------------------------------------
s	=   randnc(1,1);
gentest( 'times right', (A.*s)*x - (F.*s)*x );
gentest( 'times left', (s.*A)*x - (s.*F)*x );

%==========================================================================
% overloaded functions (unary operations)
%==========================================================================

%--------------------------------------------------------------------------
% abs
%--------------------------------------------------------------------------
gentest( 'abs', abs(A)*x - abs(F)*x );

%--------------------------------------------------------------------------
% conj
%--------------------------------------------------------------------------
gentest( 'conj', conj(A)*x - conj(F)*x );

%--------------------------------------------------------------------------
% ctranspose
%--------------------------------------------------------------------------
gentest( 'ctrans', (A')*(y') - (F')*(y') );

%--------------------------------------------------------------------------
% imag
%--------------------------------------------------------------------------
gentest( 'imag', imag(A)*x - imag(F)*x );

%--------------------------------------------------------------------------
% inv
%--------------------------------------------------------------------------
gentest( 'inv', inv(A)*x - inv(F)*x );

%--------------------------------------------------------------------------
% real
%--------------------------------------------------------------------------
gentest( 'real', real(A)*x - real(F)*x );

%--------------------------------------------------------------------------
% reshape
%--------------------------------------------------------------------------
gentest( 'reshape right', reshape(A,[m,n])*xx - reshape(F,[m,n])*xx );
G	=   reshape(F,[m,n]);
G	=   setop(G,'ctranspose',@(~,x) reshape(A,[m,n])'*x);
gentest( 'reshape left', yy*reshape(A,[m,n]) - yy*G );

%--------------------------------------------------------------------------
% transpose
%--------------------------------------------------------------------------
gentest( 'trans', (A.')*(y.') - (F.')*(y.') );

%--------------------------------------------------------------------------
% uminus
%--------------------------------------------------------------------------
gentest( 'uminus', (-A)*x - (-F)*x );

%--------------------------------------------------------------------------
% uplus
%--------------------------------------------------------------------------
gentest( 'uminus', (+A)*x - (+F)*x );

%==========================================================================
% overloaded functions (general operations)
%==========================================================================

%--------------------------------------------------------------------------
% class
%--------------------------------------------------------------------------
gentest( 'class', class(A) - class(F) );

%--------------------------------------------------------------------------
% diag
%--------------------------------------------------------------------------
gentest( 'diag', diag(A) - diag(F) );

%--------------------------------------------------------------------------
% eps
%--------------------------------------------------------------------------
gentest( 'eps', eps(max(abs(A(:)))) - eps(F) );

%--------------------------------------------------------------------------
% isbanded
%--------------------------------------------------------------------------
[lb,ub]	=   deal(3,5);
gentest( 'isbanded', isbanded(A,lb,ub) - isbanded(F,lb,ub) );

%--------------------------------------------------------------------------
% isdiag
%--------------------------------------------------------------------------
gentest( 'isdiag', isdiag(A) - isdiag(F) );

%--------------------------------------------------------------------------
% isfinite
%--------------------------------------------------------------------------
gentest( 'isfinite', isfinite(A) - isfinite(F) );

%--------------------------------------------------------------------------
% ishermitian
%--------------------------------------------------------------------------
gentest( 'ishermitian', ishermitian(A) - ishermitian(F) );

%--------------------------------------------------------------------------
% isinf
%--------------------------------------------------------------------------
gentest( 'isinf', isinf(A) - isinf(F) );

%--------------------------------------------------------------------------
% isnan
%--------------------------------------------------------------------------
gentest( 'isnan', isnan(A) - isnan(F) );

%--------------------------------------------------------------------------
% issparse
%--------------------------------------------------------------------------
gentest( 'issparse', issparse(A) - issparse(F) );

%--------------------------------------------------------------------------
% issymmetric
%--------------------------------------------------------------------------
gentest( 'issymmetric', issymmetric(A) - issymmetric(F) );

%--------------------------------------------------------------------------
% istril
%--------------------------------------------------------------------------
gentest( 'istril', istril(A) - istril(F) );

%--------------------------------------------------------------------------
% istriu
%--------------------------------------------------------------------------
gentest( 'istriu', istriu(A) - istriu(F) );

%--------------------------------------------------------------------------
% mldivide
%--------------------------------------------------------------------------
gentest( 'mldivide', A\x - F\x );

%--------------------------------------------------------------------------
% mrdivide
%--------------------------------------------------------------------------
gentest( 'mrdivide', y/A - y/F );

%--------------------------------------------------------------------------
% norm
%--------------------------------------------------------------------------
gentest( 'norm 1', norm(A,1) - norm(F,1) );
gentest( 'norm 2', norm(A,2) - norm(F,2) );
gentest( 'norm inf', norm(A,inf) - norm(F,inf) );

%--------------------------------------------------------------------------
% trace
%--------------------------------------------------------------------------
gentest( 'trace', trace(A) - trace(F) );


end

