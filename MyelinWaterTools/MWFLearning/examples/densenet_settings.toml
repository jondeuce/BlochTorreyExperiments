prec    = 32
gpu     = false
dir     = "."

[data]
val_data    = "./val"
test_data   = "./test"
train_data  = "./train"
val_batch   = "auto" # Auto treats entire test set as one batch
test_batch  = "auto" # Auto treats entire test set as one batch
train_batch = 250
[data.info]
nfeatures   = "auto" # Height of input data
nchannels   = "auto" # Number of input data channels
nlabels     = "auto" # Number of output labels
labmean     = "auto" # Label means
labwidth    = "auto" # Label distribution widths
labnames    = ["mwf", "iewf", "T2iew/TE", "T2mw/TE", "alpha", "logTE*K", "T1iew/TE", "T1mw/TE"] # Target labels
labweights  = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0] # Weights for loss function
labscale    = [100.0, 100.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0] # scale labels before plotting
labunits    = ["%", "%", "ms/ms", "ms/ms", "deg", "log(s*um/s)", "ms/ms", "ms/ms"] # label units, after scaling
[data.filter]
labnames    = [ "K",  "nTE" ]
lower       = [ 0.00,  32.0 ]
upper       = [ 1.00,  48.0 ]
[data.preprocess]
shuffle     = true
SNR         = [50.0, 0.0] # Additive random noise
chunk       = 32 # Chunk of signal to keep
normalize   = "softmax" # Normalize input signals (softmax == sums to 1)
[data.preprocess.zipper]
apply       = false
[data.preprocess.magnitude]
apply       = true
[data.preprocess.peel]
biexp       = false # peel before applying wavelet
makefrac    = true # convert component magnitudes to fractions
TEfast      = 0.015 # Approximate fast decay mode
TEslow      = 0.063 # Approximate slow decay mode
periodic    = false # subtract linear term to make signal periodic
[data.preprocess.wavelet]
apply       = false # Apply wavelet preprocessing
nterms      = 24 # number of terms to keep
[data.preprocess.ilaplace]
apply       = false # Apply ilaplace preprocessing
T2Range     = [0.001, 1.0] # T2 distribution range
nT2         = 32 # Number of exponentials in T2 distribution
alpha       = 0.1 # Tikhonov regularization parameter
[data.preprocess.PCA]
apply       = false # Apply PCA preprocessing

[model]
problem   = "forward" # forward (params to signal) or inverse (signal to params)
loss      = "l2"
acc       = "rmse"
[model.ResidualDenseNet]
act       = "relu"
dropout   = false
batchnorm = true
groupnorm = false
batchmode = "pre"
factory   = "batchconv"
Nkern     = 3
Nconv     = 2
Nfeat     = 4
Nblock    = 2
Ndense    = 2

[optimizer]
epochs  = 5000
savemod = 1
testmod = 1
[optimizer.ADAM]
lr      = 1e-3
beta    = [0.9, 0.999]
decay   = 1e-5
[optimizer.SGD]
lr      = 3e-4
rho     = 0.9
decay   = 1e-5
