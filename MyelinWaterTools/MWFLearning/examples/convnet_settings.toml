prec    = 32
gpu     = false
dir     = "."

[data]
train_data  = "./train"
test_data   = "./test"
batch_size  = 25
test_size   = "auto" # Auto treats entire test set as one batch
height      = "auto"
channels    = 1 # Number of data channels
# labels      = ["T2iew", "T2mw", "K"] # Target labels
# weights     = [1.0, 1.0, 1.0] # Weights for loss function
# labels      = ["mwf", "iewf", "T2iew", "T2mw"] # Target labels
# weights     = [1.0, 1.0, 1.0, 1.0] # Weights for loss function
# labels      = ["mwf", "iewf", "T2iew", "T2mw", "K"] # Target labels
# weights     = [1.0, 1.0, 1.0, 1.0, 1.0] # Weights for loss function
# labels      = ["mwf", "iewf", "T2iew", "T2mw", "alpha"] # Target labels
# weights     = [1.0, 1.0, 1.0, 1.0, 1.0] # Weights for loss function
# labels      = ["T2mw", "T2iew"] # Target labels
# weights     = [1.0, 1.0] # Weights for loss function
# labels      = ["mwf", "iewf", "T2iew", "T2mw", "alpha", "logK"] # Target labels
# weights     = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0] # Weights for loss function
labels      = ["mwf", "iewf", "T2iew/TE", "T2mw/TE", "alpha", "logTE*K"] # Target labels
weights     = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0] # Weights for loss function
[data.preprocess]
SNR         = [0.0] # Additive random noise
[data.preprocess.peel]
biexp       = true # peel before applying wavelet
makefrac    = true # convert component magnitudes to fractions
TEfast      = 0.015 # Threshold for fast decay mode
periodic    = false # subtract linear term to make signal periodic
[data.preprocess.wavelet]
apply       = false # Apply wavelet preprocessing
nterms      = 16 # number of terms to keep
[data.preprocess.ilaplace]
apply       = true # Apply ilaplace preprocessing
T2Range     = [0.001, 2.0] # T2 distribution range
nT2         = 60 # Number of exponentials in T2 distribution
alpha       = 0.01 # Tikhonov regularization parameter
[data.preprocess.PCA]
apply       = false # Apply PCA preprocessing

[model]
# name      = "ConvResNet"
name      = "ResidualDenseNet"
loss      = "l2"
acc       = "rmse"
act       = "relu"
# Nout      = 2 # number of output labels
# Nout      = 3 # number of output labels
# Nout      = 5 # number of output labels
Nout      = 6 # number of output labels
scale     = "auto"
offset    = "auto"
# dropout   = false
# softmax   = false
# batchnorm = true
# Nf        = [4, 8, 8] # num features for conv layers
# Nd        = [25, 25, 25, 25, 25]
# Npool     = 3 # pooling size
# Nkern     = 5 # kernel size
[model.resnet]
dropout   = false
batchnorm = false
groupnorm = true
batchmode = "pre" # Pre-, post-, or hybrid normalization for BatchConvConnection
Nkern     = 3 # Convolution kernel size
Nconv     = 2 # Convolutions per BatchConvConnection
Nfeat     = 4 # Number of features to upsample to from 1-feature input
Nblock    = 2 # Number of blocks in densely connected RDB layer
Ndense    = 2 # Number of blocks in GlobalFeatureFusion concatenation layer

[optimizer]
epochs  = 10000
savemod = 1
testmod = 1
[optimizer.ADAM]
lr      = 0.001
beta    = [0.9, 0.999]

[plot]
# scale     = [1000.0, 1000.0] # scale labels before plotting
# units     = ["ms", "ms"] # label units, after scaling
# scale     = [1000.0, 1000.0, 1.0] # scale labels before plotting
# units     = ["ms", "ms", "um/s"] # label units, after scaling
# scale     = [100.0, 100.0, 1000.0, 1000.0] # scale labels before plotting
# units     = ["%", "%", "ms", "ms"] # label units, after scaling
# scale     = [100.0, 100.0, 1000.0, 1000.0, 1.0] # scale labels before plotting
# units     = ["%", "%", "ms", "ms", "um/s"] # label units, after scaling
# scale     = [100.0, 100.0, 1000.0, 1000.0, 1.0] # scale labels before plotting
# units     = ["%", "%", "ms", "ms", "deg"] # label units, after scaling
# scale     = [100.0, 100.0, 1000.0, 1000.0, 1.0, 1.0] # scale labels before plotting
# units     = ["%", "%", "ms", "ms", "deg", "log(um/s)"] # label units, after scaling
scale     = [100.0, 100.0, 1.0, 1.0, 1.0, 1.0] # scale labels before plotting
units     = ["%", "%", "ms/ms", "ms/ms", "deg", "log(um)"] # label units, after scaling
